{"version":3,"sources":["utils/fetchSlack.tsx","components/contactComponents/ContactMain.tsx"],"names":["fetchSlack","webhookUrl","myData","a","fetch","method","mode","headers","redirect","body","JSON","stringify","res","ContactMain","useState","name","setName","email","setEmail","message","setMessage","sent","setSent","handleSubmit","event","preventDefault","text","setTimeout","console","error","className","Form","onSubmit","Group","controlId","Control","value","onChange","e","target","type","placeholder","as","rows","Button","variant","disabled","length","Alert"],"mappings":"oMAAaA,EAAU,uCAAG,WAAOC,EAAiBC,GAAxB,eAAAC,EAAA,sEACNC,MAAMH,EAAY,CAClCI,OAAQ,OACRC,KAAM,UAGNC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SAEVC,KAAMC,KAAKC,UAAUT,KAZC,cAClBU,EADkB,yBAcjBA,GAdiB,2CAAH,wD,OCsFRC,UAhFe,WAC5B,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAEMC,EAAY,uCAAG,WAAOC,GAAP,eAAArB,EAAA,6DACnBqB,EAAMC,iBAGJ,oFACIvB,EAAS,CACbwB,KAAK,SAAD,OAAWX,EAAX,qBAA4BE,EAA5B,uBAAgDE,IANnC,kBAUXnB,EANN,oFAM6BE,GAVZ,OAWjBc,EAAQ,IACRE,EAAS,IACTE,EAAW,IACXE,GAAQ,GACRK,YAAW,WACTL,GAAQ,KACP,KAjBc,kDAmBjBM,QAAQC,MAAM,yBAnBG,0DAAH,sDA2BlB,OACE,qCACE,sBAAKC,UAAU,gBAAf,UACE,8CACA,8FAEF,qBAAKA,UAAU,eAAf,SACE,eAACC,EAAA,EAAD,CAAMC,SAAUT,EAAhB,UACE,cAACQ,EAAA,EAAKE,MAAN,CAAYH,UAAU,OAAOI,UAAU,OAAvC,SACE,cAACH,EAAA,EAAKI,QAAN,CACEC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAAQsB,EAAEC,OAAOH,QAClCI,KAAK,OACLC,YAAY,gBAGhB,cAACV,EAAA,EAAKE,MAAN,CAAYH,UAAU,OAAOI,UAAU,QAAvC,SACE,cAACH,EAAA,EAAKI,QAAN,CACEC,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAAOpB,EAASoB,EAAEC,OAAOH,QACnCI,KAAK,OACLC,YAAY,iBAGhB,cAACV,EAAA,EAAKE,MAAN,CAAYH,UAAU,OAAOI,UAAU,UAAvC,SACE,cAACH,EAAA,EAAKI,QAAN,CACEC,MAAOjB,EACPkB,SAAU,SAACC,GAAD,OAAOlB,EAAWkB,EAAEC,OAAOH,QACrCM,GAAG,WACHD,YAAY,eACZE,KAAM,MAGV,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,SAASM,WApCvC/B,EAAKgC,OAAS,GAAK9B,EAAM8B,OAAS,GAAK5B,EAAQ4B,OAAS,GAoCzD,oBAGC1B,GACC,qBAAKS,UAAU,aAAf,SACE,cAACkB,EAAA,EAAD,CAAOH,QAAQ,UAAf","file":"static/js/8.50108100.chunk.js","sourcesContent":["export const fetchSlack = async (webhookUrl: any, myData: { text: string }) => {\n  const res = await fetch(webhookUrl, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"no-cors\", // no-cors, *cors, same-origin\n    // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    // credentials: \"include\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\",\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: \"follow\", // manual, *follow, error\n    // referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(myData),\n  });\n  return res;\n};\n","import { useState } from \"react\";\n\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport { fetchSlack } from \"../../utils/fetchSlack\";\n\nconst ContactMain: React.FC = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [sent, setSent] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const webhookURL =\n      \"https://hooks.slack.com/services/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\";\n    const myData = {\n      text: `Name: ${name} \\nEmail: ${email} \\nMessage: ${message}`,\n    };\n\n    try {\n      await fetchSlack(webhookURL, myData);\n      setName(\"\");\n      setEmail(\"\");\n      setMessage(\"\");\n      setSent(true);\n      setTimeout(() => {\n        setSent(false);\n      }, 7000);\n    } catch (err) {\n      console.error(\"Something went wrong.\");\n    }\n  };\n\n  const validateForm = () => {\n    return name.length > 0 && email.length > 0 && message.length > 0;\n  };\n\n  return (\n    <>\n      <div className=\"contact-intro\">\n        <h1>Get in Touch</h1>\n        <p>Have an idea you want to realize or want to work together?</p>\n      </div>\n      <div className=\"contact-form\">\n        <Form onSubmit={handleSubmit}>\n          <Form.Group className=\"mb-3\" controlId=\"name\">\n            <Form.Control\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              type=\"text\"\n              placeholder=\"Your name\"\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"email\">\n            <Form.Control\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              type=\"text\"\n              placeholder=\"Your email\"\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"message\">\n            <Form.Control\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              as=\"textarea\"\n              placeholder=\"Your message\"\n              rows={7}\n            />\n          </Form.Group>\n          <Button variant=\"warning\" type=\"submit\" disabled={!validateForm()}>\n            Submit\n          </Button>\n          {sent && (\n            <div className=\"sent-alert\">\n              <Alert variant=\"warning\">Your message was sent!</Alert>\n            </div>\n          )}\n        </Form>\n      </div>\n    </>\n  );\n};\n\nexport default ContactMain;\n"],"sourceRoot":""}